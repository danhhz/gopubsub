// Code generated by protoc-gen-go.
// source: gopubsub.proto
// DO NOT EDIT!

/*
Package server is a generated protocol buffer package.

It is generated from these files:
	gopubsub.proto

It has these top-level messages:
	Message
	PublishMultiRequest
	PublishMultiReply
	SubscribeRequest
	SubscribeResponse
*/
package server

import proto "github.com/golang/protobuf/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal

type Message struct {
	Offset uint64 `protobuf:"varint,1,opt,name=offset" json:"offset,omitempty"`
	Crc    uint32 `protobuf:"varint,2,opt,name=crc" json:"crc,omitempty"`
	Key    []byte `protobuf:"bytes,10,opt,name=key,proto3" json:"key,omitempty"`
	Value  []byte `protobuf:"bytes,11,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}

type PublishMultiRequest struct {
	Topic    string     `protobuf:"bytes,1,opt,name=topic" json:"topic,omitempty"`
	Messages []*Message `protobuf:"bytes,2,rep,name=messages" json:"messages,omitempty"`
}

func (m *PublishMultiRequest) Reset()         { *m = PublishMultiRequest{} }
func (m *PublishMultiRequest) String() string { return proto.CompactTextString(m) }
func (*PublishMultiRequest) ProtoMessage()    {}

func (m *PublishMultiRequest) GetMessages() []*Message {
	if m != nil {
		return m.Messages
	}
	return nil
}

type PublishMultiReply struct {
}

func (m *PublishMultiReply) Reset()         { *m = PublishMultiReply{} }
func (m *PublishMultiReply) String() string { return proto.CompactTextString(m) }
func (*PublishMultiReply) ProtoMessage()    {}

type SubscribeRequest struct {
	Topic  string `protobuf:"bytes,1,opt,name=topic" json:"topic,omitempty"`
	Offset uint64 `protobuf:"varint,2,opt,name=offset" json:"offset,omitempty"`
}

func (m *SubscribeRequest) Reset()         { *m = SubscribeRequest{} }
func (m *SubscribeRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeRequest) ProtoMessage()    {}

type SubscribeResponse struct {
	Messages []*Message `protobuf:"bytes,1,rep,name=messages" json:"messages,omitempty"`
}

func (m *SubscribeResponse) Reset()         { *m = SubscribeResponse{} }
func (m *SubscribeResponse) String() string { return proto.CompactTextString(m) }
func (*SubscribeResponse) ProtoMessage()    {}

func (m *SubscribeResponse) GetMessages() []*Message {
	if m != nil {
		return m.Messages
	}
	return nil
}

func init() {
}

// Client API for PubSub service

type PubSubClient interface {
	PublishMulti(ctx context.Context, in *PublishMultiRequest, opts ...grpc.CallOption) (*PublishMultiReply, error)
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (PubSub_SubscribeClient, error)
}

type pubSubClient struct {
	cc *grpc.ClientConn
}

func NewPubSubClient(cc *grpc.ClientConn) PubSubClient {
	return &pubSubClient{cc}
}

func (c *pubSubClient) PublishMulti(ctx context.Context, in *PublishMultiRequest, opts ...grpc.CallOption) (*PublishMultiReply, error) {
	out := new(PublishMultiReply)
	err := grpc.Invoke(ctx, "/server.PubSub/PublishMulti", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pubSubClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (PubSub_SubscribeClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_PubSub_serviceDesc.Streams[0], c.cc, "/server.PubSub/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &pubSubSubscribeClient{stream}
	if err := x.ClientStream.SendProto(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PubSub_SubscribeClient interface {
	Recv() (*SubscribeResponse, error)
	grpc.ClientStream
}

type pubSubSubscribeClient struct {
	grpc.ClientStream
}

func (x *pubSubSubscribeClient) Recv() (*SubscribeResponse, error) {
	m := new(SubscribeResponse)
	if err := x.ClientStream.RecvProto(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for PubSub service

type PubSubServer interface {
	PublishMulti(context.Context, *PublishMultiRequest) (*PublishMultiReply, error)
	Subscribe(*SubscribeRequest, PubSub_SubscribeServer) error
}

func RegisterPubSubServer(s *grpc.Server, srv PubSubServer) {
	s.RegisterService(&_PubSub_serviceDesc, srv)
}

func _PubSub_PublishMulti_Handler(srv interface{}, ctx context.Context, buf []byte) (proto.Message, error) {
	in := new(PublishMultiRequest)
	if err := proto.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(PubSubServer).PublishMulti(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _PubSub_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvProto(m); err != nil {
		return err
	}
	return srv.(PubSubServer).Subscribe(m, &pubSubSubscribeServer{stream})
}

type PubSub_SubscribeServer interface {
	Send(*SubscribeResponse) error
	grpc.ServerStream
}

type pubSubSubscribeServer struct {
	grpc.ServerStream
}

func (x *pubSubSubscribeServer) Send(m *SubscribeResponse) error {
	return x.ServerStream.SendProto(m)
}

var _PubSub_serviceDesc = grpc.ServiceDesc{
	ServiceName: "server.PubSub",
	HandlerType: (*PubSubServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PublishMulti",
			Handler:    _PubSub_PublishMulti_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _PubSub_Subscribe_Handler,
			ServerStreams: true,
		},
	},
}
